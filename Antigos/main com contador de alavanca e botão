import pygame
import sys
from nivel import criar_primeiro_nivel
from alavanca import Alavanca
from cronometro import Cronometro
from diamante import carregar_sprites_diamantes, DiamanteAzul, DiamanteVermelho

pygame.init()
LARGURA, ALTURA = 1280, 720
JANELA = pygame.display.set_mode((LARGURA, ALTURA))

pygame.display.set_caption("Fogo & Água: Python Version")
FPS = 60

BRANCO = (255, 255, 255)
CINZA = (128, 128, 128)
PRETO = (0, 0, 0)

MENU, JOGANDO, VITORIA = "menu", "jogando", "vitoria"

class Jogo:
    def __init__(self):
        carregar_sprites_diamantes()

        self.alavancas = pygame.sprite.Group()
        self.alavancas.add(Alavanca((400, 430), "branca"), Alavanca((600, 170), "azul"))
        
        self.relogio = pygame.time.Clock()
        self.fonte_geral = pygame.font.Font(None, 36)
        self.fonte_titulo = pygame.font.Font(None, 74)
        self.estado = MENU
        self.cronometro = Cronometro(fonte=self.fonte_geral, posicao=(0,0), cor=BRANCO)

        self.moldura_timer_img = pygame.image.load("Imagens/moldura_timer.png").convert_alpha()
        self.moldura_timer_img = pygame.transform.scale(self.moldura_timer_img, (150, 65))
        self.moldura_timer_rect = self.moldura_timer_img.get_rect(midtop=((LARGURA // 2), 0))
        
        self.cronometro.fonte = pygame.font.Font(None, 28)
        self.cronometro.centralizado = True
        self.cronometro.posicao = (
            self.moldura_timer_rect.centerx,
            self.moldura_timer_rect.top + self.moldura_timer_rect.height // 2
        )

        self.background = pygame.image.load("Imagens/background.png").convert()
        self.background = pygame.transform.scale(self.background, (LARGURA, ALTURA))
        
        self.imagem_menu = pygame.image.load("Imagens/tela_inicial_jogo.png").convert_alpha()
        self.imagem_menu = pygame.transform.scale(self.imagem_menu, (LARGURA, ALTURA))

        nivel = criar_primeiro_nivel()

        self.jogador1 = nivel["jogador1"]
        self.jogador2 = nivel["jogador2"]
        self.plataformas = nivel["plataformas"]
        self.botao_movel_1 = nivel["botao_movel_1"]
        self.botao_movel_2 = nivel["botao_movel_2"]
        self.plataforma_movel = nivel["plataforma_movel"]
        self.lagos = nivel["lagos"]
        self.porta_fogo = nivel["porta_fogo"]
        self.porta_agua = nivel["porta_agua"]
        self.diamantes = nivel["diamantes"]

        # Contadores de itens ativos
        self.botoes_ativos = 0
        self.alavancas_ativas = 0
        
        # Rastreia o estado anterior para contar ativações/desativações
        self.botao_1_estava_pressionado = False
        self.botao_2_estava_pressionado = False
        
        # Dicionário para rastrear o estado de cada alavanca
        try:
            self.estados_anteriores_alavancas = {alavanca: alavanca.ativada for alavanca in self.alavancas}
        except AttributeError:
             self.estados_anteriores_alavancas = {alavanca: False for alavanca in self.alavancas}


    def executar(self):
        while True:
            self.relogio.tick(FPS)
            self.tratar_eventos()
            self.atualizar()
            self.desenhar()

    def tratar_eventos(self):
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif evento.type == pygame.KEYDOWN:
                if self.estado == MENU and evento.key == pygame.K_SPACE:
                    self.estado = JOGANDO
                    self.cronometro.reset()
                elif self.estado == VITORIA and evento.key == pygame.K_r:
                    self.__init__()

    def atualizar(self):
        if self.estado != JOGANDO: 
            return

        teclas = pygame.key.get_pressed()
        self.jogador1.update(teclas)
        self.jogador2.update(teclas)

        for jogador in [self.jogador1, self.jogador2]:
            jogador.aplicar_gravidade()
            lagos_solidos = [lago for lago in self.lagos if lago.tipo == jogador.tipo]
            jogador.checar_colisao(self.plataformas + lagos_solidos)
        
        for jogador in [self.jogador1, self.jogador2]:
            for lago in self.lagos:
                if jogador.rect.colliderect(lago.rect) and lago.tipo != jogador.tipo:
                    self.__init__()
                    return

        # Atualização dos botões
        self.botao_movel_1.atualizar([self.jogador1, self.jogador2])
        self.botao_movel_2.atualizar([self.jogador1, self.jogador2])
        ativado = self.botao_movel_1.pressionado or self.botao_movel_2.pressionado
        self.plataforma_movel.atualizar(ativado)

        # MODIFICADO: Lógica do contador de botões (incrementa e decrementa)
        # Botão 1
        if self.botao_movel_1.pressionado and not self.botao_1_estava_pressionado:
            self.botoes_ativos += 1  # Foi ativado
        elif not self.botao_movel_1.pressionado and self.botao_1_estava_pressionado:
            self.botoes_ativos -= 1  # Foi desativado
        self.botao_1_estava_pressionado = self.botao_movel_1.pressionado
        
        # Botão 2
        if self.botao_movel_2.pressionado and not self.botao_2_estava_pressionado:
            self.botoes_ativos += 1  # Foi ativado
        elif not self.botao_movel_2.pressionado and self.botao_2_estava_pressionado:
            self.botoes_ativos -= 1  # Foi desativado
        self.botao_2_estava_pressionado = self.botao_movel_2.pressionado

        # Coleta de diamantes
        for jogador in [self.jogador1, self.jogador2]:
            for diamante in self.diamantes[:]:
                if (jogador.tipo == "agua" and isinstance(diamante, DiamanteAzul) and jogador.rect.colliderect(diamante.rect)) or \
                   (jogador.tipo == "fogo" and isinstance(diamante, DiamanteVermelho) and jogador.rect.colliderect(diamante.rect)):
                    self.diamantes.remove(diamante)

        # Atualização das alavancas
        self.alavancas.update()
        for jogador in [self.jogador1, self.jogador2]:
            for alavanca in self.alavancas:
                alavanca.check_colisao(jogador)
        
        # MODIFICADO: Lógica do contador de alavancas (incrementa e decrementa)
        # Assumindo que a classe Alavanca tem um atributo booleano 'ativada'
        for alavanca in self.alavancas:
            estado_atual = alavanca.ativada
            estado_anterior = self.estados_anteriores_alavancas[alavanca]
            
            if estado_atual and not estado_anterior:
                self.alavancas_ativas += 1  # Foi ativada
            elif not estado_atual and estado_anterior:
                self.alavancas_ativas -= 1  # Foi desativada
                
            self.estados_anteriores_alavancas[alavanca] = estado_atual

        # Atualização do cronômetro
        self.cronometro.update()

        # Lógica de vitória
        todos_diamantes_coletados = not self.diamantes
        if todos_diamantes_coletados:
            jogadores = [self.jogador1, self.jogador2]
            jogador_fogo = next(j for j in jogadores if j.tipo == "fogo")
            jogador_agua = next(j for j in jogadores if j.tipo == "agua")

            if jogador_fogo.rect.colliderect(self.porta_fogo.rect):
                self.porta_fogo.destrancar()
            if jogador_agua.rect.colliderect(self.porta_agua.rect):
                self.porta_agua.destrancar()

            if not self.porta_fogo.trancada and not self.porta_agua.trancada:
                self.estado = VITORIA

    def desenhar_menu(self):
        JANELA.blit(self.imagem_menu, (0, 0))
        s = pygame.Surface((LARGURA, 150), pygame.SRCALPHA)
        s.fill((0, 0, 0, 150))
        JANELA.blit(s, (0, ALTURA//3 - 50))
        texto_instrucao = self.fonte_geral.render("Pressione ESPAÇO para começar", True, CINZA)
        rect_instrucao = texto_instrucao.get_rect(center=(LARGURA / 2, ALTURA / 2.))
        JANELA.blit(texto_instrucao, rect_instrucao)

    def desenhar(self):
        JANELA.blit(self.background, (0, 0))

        if self.estado == MENU:
            self.desenhar_menu()

        elif self.estado == JOGANDO:
            for plataforma in self.plataformas:
                plataforma.desenhar(JANELA)
            for diamante in self.diamantes:
                diamante.desenhar(JANELA)

            self.porta_fogo.desenhar(JANELA)
            self.porta_agua.desenhar(JANELA)
            self.alavancas.draw(JANELA)
            self.jogador1.desenhar(JANELA)
            self.jogador2.desenhar(JANELA)
            self.botao_movel_1.desenhar(JANELA)
            self.botao_movel_2.desenhar(JANELA)
            self.plataforma_movel.desenhar(JANELA)

            for lago in self.lagos:
                lago.desenhar(JANELA)

            JANELA.blit(self.moldura_timer_img, self.moldura_timer_rect)
            self.cronometro.desenhar(JANELA)
            
            total_inicial_diamantes = 8 
            coletados = total_inicial_diamantes - len(self.diamantes)
            self.desenhar_texto(f"Diamantes: {coletados}/{total_inicial_diamantes}", 10, 50, self.fonte_geral)

            # MODIFICADO: Exibe o número de itens ativos
            self.desenhar_texto(f"Botões Ativos: {self.botoes_ativos}", 10, 80, self.fonte_geral)
            self.desenhar_texto(f"Alavancas Ativas: {self.alavancas_ativas}", 10, 110, self.fonte_geral)

        elif self.estado == VITORIA:
            self.desenhar_texto("Vocês venceram! Pressione R para reiniciar", 180, 250, self.fonte_titulo)

        pygame.display.flip()

    def desenhar_texto(self, texto, x, y, fonte):
        rotulo = fonte.render(texto, True, BRANCO)
        JANELA.blit(rotulo, (x, y))

if __name__ == "__main__":
    Jogo().executar()
